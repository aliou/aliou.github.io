{
    "version": "https://jsonfeed.org/version/1",
    "title": "Aliou Diallo is a developer based in Paris.",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "Aliou Diallo is a developer based in Paris.",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Aliou Diallo",
        "url": "https://aliou.me"
    },
    
"items": [
    
        {
            "id": "/posts/2020/04/regexp-named-captures/",
            "title": "Using named captures to extract information from Strings",
            "summary": "Regular expressions' named captures are an elegant way to parse and extract data from strings.\n",
            "content_text": "For an internal project at work, I recently had to parse the names of Heroku review applications to retrieve some data. The application names looked like this:&lt;project_name&gt;-pr-&lt;pull_request_id&gt;At first, since each part I needed was separated by a dash, I had some code that looked like this:*project_name, _, pull_request_id = application_name.split('-')project_name = project_name.join('-')Because the project name could also have some dashes in it, I needed to rejoin it after extracting the pull request data.At first, for a prototype, this worked fine. But when this internal project transitioned into being an important part of my team’s tooling, I started looking at a better and cleaner way to achieve the same result.Since we were already validating the format of the application name with a regular expression, I figured I’d use it to also retrieve the data using named captures.Regular expressions in RubyFor a refresher on a regular expressions, I highly recommend this article1 by Dan Eden.As a reminder, there are multiple ways to create regular expressions in Ruby:  Using /xxxx/  Using percent literal : %r{}  Using the class initializer: Regexp#newWith your newly created regular expression, there are two main ways to check if a string matches a regular expression:  Calling String#match with the regular expression as argument:    'abc'.match(/a/)# =&gt; #&lt;MatchData \"a\"&gt;        Calling Regexp#match on the regular expression with the string as argument:    /a/.match('abc')# =&gt; #&lt;MatchData \"a\"&gt;      If the String matches the regular expression, it will return a MatchData object, otherwise it will return nil. The MatchData object encapsulates the result of matching a String against a Regexp, including the different submatches. It also contains the eventual captures and named captures.Named capturesNamed captures allow you to describe submatches of a regular expression and then retrieve them from the resulting MatchData object. In our case, our regular expression looked like this:/.*-pr-\\d+/To use named captures, we first need to add capture them into groups to our regular expressions. Adding capture groups is as simple as wrapping them inside parentheses:/(.*)-pr-(\\d+)/Finally, name the different captures. To do this, we need to prefix the content of the capture group with its name:/(?&lt;project_name&gt;.*)-pr-(?&lt;pull_request_id&gt;\\d+)/Now that we’ve done this, we can easily retrieve the data we want from the application name using our resulting object:expression = /(?&lt;project_name&gt;.*)-pr-(?&lt;pull_request_id&gt;\\d+)/application_name = 'my_app-pr-1234'matches = expression.match(application_name)matches[:project_name] # =&gt; 'my_app'matches.named_captures # =&gt; {\"project_name\"=&gt;\"my_app\", \"pull_request_id\"=&gt;\"1234\"}Thanks to Bachir Çaoui, Alexis Woo and Alexis Focheux for reviewing draft versions of this post.            While the article is intended for designers and UX writers, I found that it was an excellent introduction to regular expressions for everyone. &#8617;      ",
            "content_html": "<p>For an internal project at work, I recently had to parse the names of Heroku <a href=\"https://devcenter.heroku.com/articles/github-integration-review-apps-old\">review applications</a> to retrieve some data. The application names looked like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;project_name&gt;-pr-&lt;pull_request_id&gt;</code></pre></div></div><p>At first, since each part I needed was separated by a dash, I had some code that looked like this:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">*</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">pull_request_id</span> <span class=\"o\">=</span> <span class=\"n\">application_name</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">)</span><span class=\"n\">project_name</span> <span class=\"o\">=</span> <span class=\"n\">project_name</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">)</span></code></pre></div></div><p>Because the project name could also have some dashes in it, I needed to rejoin it after extracting the pull request data.At first, for a prototype, this worked fine. But when this internal project transitioned into being an important part of my team’s tooling, I started looking at a better and cleaner way to achieve the same result.</p><p>Since we were already validating the format of the application name with a regular expression, I figured I’d use it to also retrieve the data using named captures.</p><h2 id=\"regular-expressions-in-ruby\">Regular expressions in Ruby</h2><p>For a refresher on a <a href=\"https://www.rubyguides.com/2015/06/ruby-regex/\">regular expressions</a>, I highly recommend <a href=\"https://daneden.me/2019/11/23/regex-for-designers-and-writers/\">this article</a><sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> by <a href=\"https://daneden.me\">Dan Eden</a>.</p><p>As a reminder, there are multiple ways to create regular expressions in Ruby:</p><ul>  <li>Using <code class=\"highlighter-rouge\">/xxxx/</code></li>  <li>Using percent literal : <code class=\"highlighter-rouge\">%r{}</code></li>  <li>Using the class initializer: <code class=\"highlighter-rouge\">Regexp#new</code></li></ul><p>With your newly created regular expression, there are two main ways to check if a string matches a regular expression:</p><ul>  <li>Calling <code class=\"highlighter-rouge\">String#match</code> with the regular expression as argument:    <div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s1\">'abc'</span><span class=\"p\">.</span><span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"sr\">/a/</span><span class=\"p\">)</span><span class=\"c1\"># =&gt; #&lt;MatchData \"a\"&gt;</span></code></pre></div>    </div>  </li>  <li>Calling <code class=\"highlighter-rouge\">Regexp#match</code> on the regular expression with the string as argument:    <div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"sr\">/a/</span><span class=\"p\">.</span><span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span><span class=\"c1\"># =&gt; #&lt;MatchData \"a\"&gt;</span></code></pre></div>    </div>  </li></ul><p>If the String matches the regular expression, it will return a <a href=\"https://www.rubydoc.info/stdlib/core/MatchData\"><code class=\"highlighter-rouge\">MatchData</code></a> object, otherwise it will return <code class=\"highlighter-rouge\">nil</code>. The <a href=\"https://www.rubydoc.info/stdlib/core/MatchData\"><code class=\"highlighter-rouge\">MatchData</code></a> object encapsulates the result of matching a String against a Regexp, including the different submatches. It also contains the eventual captures and named captures.</p><h2 id=\"named-captures\">Named captures</h2><p>Named captures allow you to describe submatches of a regular expression and then retrieve them from the resulting <a href=\"https://www.rubydoc.info/stdlib/core/MatchData\"><code class=\"highlighter-rouge\">MatchData</code></a> object. In our case, our regular expression looked like this:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"sr\">/.*-pr-\\d+/</span></code></pre></div></div><p>To use named captures, we first need to add capture them into groups to our regular expressions. Adding capture groups is as simple as wrapping them inside parentheses:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"sr\">/(.*)-pr-(\\d+)/</span></code></pre></div></div><p>Finally, name the different captures. To do this, we need to prefix the content of the capture group with its name:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"sr\">/(?&lt;project_name&gt;.*)-pr-(?&lt;pull_request_id&gt;\\d+)/</span></code></pre></div></div><p>Now that we’ve done this, we can easily retrieve the data we want from the application name using our resulting object:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"sr\">/(?&lt;project_name&gt;.*)-pr-(?&lt;pull_request_id&gt;\\d+)/</span><span class=\"n\">application_name</span> <span class=\"o\">=</span> <span class=\"s1\">'my_app-pr-1234'</span><span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">expression</span><span class=\"p\">.</span><span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"n\">application_name</span><span class=\"p\">)</span><span class=\"n\">matches</span><span class=\"p\">[</span><span class=\"ss\">:project_name</span><span class=\"p\">]</span> <span class=\"c1\"># =&gt; 'my_app'</span><span class=\"n\">matches</span><span class=\"p\">.</span><span class=\"nf\">named_captures</span> <span class=\"c1\"># =&gt; {\"project_name\"=&gt;\"my_app\", \"pull_request_id\"=&gt;\"1234\"}</span></code></pre></div></div><hr /><p><small>Thanks to <a href=\"https://twitter.com/caouibachir\" target=\"_blank\">Bachir Çaoui</a>, Alexis Woo and Alexis Focheux for reviewing draft versions of this post.</small></p><hr /><div class=\"footnotes\" role=\"doc-endnotes\">  <ol>    <li id=\"fn:1\" role=\"doc-endnote\">      <p>While the article is intended for designers and UX writers, I found that it was an excellent introduction to regular expressions for everyone. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>    </li>  </ol></div>",
            "url": "/posts/2020/04/regexp-named-captures/",
            
            
            
            
            
            "date_published": "2020-04-09T00:00:00+00:00",
            "date_modified": "2020-04-09T00:00:00+00:00",
            
                "author":  {
                "name": "Aliou Diallo",
                "url": "https://aliou.me"
                }
                
            
        },
    
        {
            "id": "/posts/2020/02/overriding-inspect/",
            "title": "Changing perception of objects by overriding the inspect method",
            "summary": "Let's see how Ruby allows us to override the inspect method to change how an object is perceived.\n",
            "content_text": "While writing my previous post, I realized that while using the attributes API allows us to avoid making mistakes when instantiating our value objects, it might not entirely convey that there’s a limited number of objects that can be instantiated 1.To this end, I thought about a way to prevent this: let’s pretend that our value objects are constants.Generating constantsFirst, let’s take our Ship::Category from the previous post:class Ship::Category  VALID_CATEGORIES = %w(    shuttle supply_carrier troop_carrier war_ship  ).freeze  def initialize(category)    raise \"invalid category: #{category.inspect}\" unless category.in?(VALID_CATEGORIES)    @raw_category = category  end  def to_s    raw_category  end  private  attr_reader :raw_categoryendLet’s start by defining constants for each of our values. Under the initialize method 2, let’s create the constants using const_set and a bit of metaprogramming:class Shift::Category  # ...  VALID_CATEGORIES.each do |raw_category|    const_set(raw_category.upcase, new(raw_category))  endendCalling Ship::Category.constants show us that our constants have correctly been created:pry(main)&gt; Ship::Category.constants# =&gt; [:WAR_SHIP, :TROOP_CARRIER, :SHUTTLE, :SUPPLY_CARRIER, :VALID_CATEGORIES]However, inspecting the constant reveals our trickery:pry(main)&gt; Ship::Category::SHUTTLE# =&gt; #&lt;Ship::Category:0x00007fbddc853350 @raw_category=\"shuttle\"&gt;So, how do we really pretend that our Ship::Category object is truly a constant ? We can do this by overriding the inspect method:Overriding inspectAs we can see above, by default, inspect returns the class name, a representation of the memory address of the object and a list of instance variables of the object.In our case, we want inspect to instead display how the object should be accessed. This means making it look like the constants we’ve created above:class Shift::Category  # ...  def inspect    \"#{self.class}::#{raw_category.upcase}\"  endendWith this, the value object is now displayed as a constant when inspecting the object or in logs:# Before we had:pry(main)&gt; Ship::Category::SHUTTLE# =&gt; #&lt;Ship::Category:0x00007fbddc853350 @raw_category=\"shuttle\"&gt;# Now we havepry(main)&gt; Ship::Category::SHUTTLE# =&gt; Ship::Category::SHUTTLEBesides indulging in my whims, there are other interesting reasons to override inspect:  This is useful to hide sensitive values like emails or encrypted passwords, as Devise does it.  Since Rails 6, you can configure ActiveRecord to filter attributes from inspection. This is also done by overriding the inspect method.  The IPAddr class also overrides the inspect method to display a human readable representation of the IP address.The code examples in this post are also available on GitHub.Thanks to Bachir Çaoui and Stéphanie Chhim for reviewing a draft version of this post.            Of course, we could look at the file defining the constants, but where would be the fun in that? &#8617;              Because our constants are set directly in the class, the new method needs to be already defined, hence defining them under the initialize method. &#8617;      ",
            "content_html": "<p>While writing my <a href=\"/2019/10/attributes-api-and-value-objects/\">previous post</a>, I realized that while using the attributes API allows us to avoid making mistakes when instantiating our value objects, it might not entirely convey that there’s a limited number of objects that can be instantiated <sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>.</p><p>To this end, I thought about a way to prevent this: let’s pretend that our value objects are constants.</p><hr /><h2 id=\"generating-constants\">Generating constants</h2><p>First, let’s take our <code class=\"highlighter-rouge\">Ship::Category</code> from the previous post:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Ship</span><span class=\"o\">::</span><span class=\"no\">Category</span>  <span class=\"no\">VALID_CATEGORIES</span> <span class=\"o\">=</span> <span class=\"sx\">%w(    shuttle supply_carrier troop_carrier war_ship  )</span><span class=\"p\">.</span><span class=\"nf\">freeze</span>  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"p\">)</span>    <span class=\"k\">raise</span> <span class=\"s2\">\"invalid category: </span><span class=\"si\">#{</span><span class=\"n\">category</span><span class=\"p\">.</span><span class=\"nf\">inspect</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"k\">unless</span> <span class=\"n\">category</span><span class=\"p\">.</span><span class=\"nf\">in?</span><span class=\"p\">(</span><span class=\"no\">VALID_CATEGORIES</span><span class=\"p\">)</span>    <span class=\"vi\">@raw_category</span> <span class=\"o\">=</span> <span class=\"n\">category</span>  <span class=\"k\">end</span>  <span class=\"k\">def</span> <span class=\"nf\">to_s</span>    <span class=\"n\">raw_category</span>  <span class=\"k\">end</span>  <span class=\"kp\">private</span>  <span class=\"nb\">attr_reader</span> <span class=\"ss\">:raw_category</span><span class=\"k\">end</span></code></pre></div></div><p>Let’s start by defining constants for each of our values. Under the <code class=\"highlighter-rouge\">initialize</code> method <sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup>, let’s create the constants using <a href=\"https://www.rubydoc.info/stdlib/core/Module:const_set\"><code class=\"highlighter-rouge\">const_set</code></a> and a bit of metaprogramming:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Shift</span><span class=\"o\">::</span><span class=\"no\">Category</span>  <span class=\"c1\"># ...</span>  <span class=\"no\">VALID_CATEGORIES</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">raw_category</span><span class=\"o\">|</span>    <span class=\"nb\">const_set</span><span class=\"p\">(</span><span class=\"n\">raw_category</span><span class=\"p\">.</span><span class=\"nf\">upcase</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">raw_category</span><span class=\"p\">))</span>  <span class=\"k\">end</span><span class=\"k\">end</span></code></pre></div></div><p>Calling <a href=\"https://www.rubydoc.info/stdlib/core/Module:constants\"><code class=\"highlighter-rouge\">Ship::Category.constants</code></a> show us that our constants have correctly been created:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">pry</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"no\">Ship</span><span class=\"o\">::</span><span class=\"no\">Category</span><span class=\"p\">.</span><span class=\"nf\">constants</span><span class=\"c1\"># =&gt; [:WAR_SHIP, :TROOP_CARRIER, :SHUTTLE, :SUPPLY_CARRIER, :VALID_CATEGORIES]</span></code></pre></div></div><p>However, inspecting the constant reveals our trickery:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">pry</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"no\">Ship</span><span class=\"o\">::</span><span class=\"no\">Category</span><span class=\"o\">::</span><span class=\"no\">SHUTTLE</span><span class=\"c1\"># =&gt; #&lt;Ship::Category:0x00007fbddc853350 @raw_category=\"shuttle\"&gt;</span></code></pre></div></div><p>So, how do we really pretend that our <code class=\"highlighter-rouge\">Ship::Category</code> object is truly a constant ? We can do this by overriding the <a href=\"https://www.rubydoc.info/stdlib/core/Object:inspect\"><code class=\"highlighter-rouge\">inspect</code></a> method:</p><h2 id=\"overriding-inspect\">Overriding inspect</h2><p>As we can see above, by default, <code class=\"highlighter-rouge\">inspect</code> returns the class name, a representation of the memory address of the object and a list of instance variables of the object.</p><p>In our case, we want <code class=\"highlighter-rouge\">inspect</code> to instead display how the object should be accessed. This means making it look like the constants we’ve created above:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Shift</span><span class=\"o\">::</span><span class=\"no\">Category</span>  <span class=\"c1\"># ...</span>  <span class=\"k\">def</span> <span class=\"nf\">inspect</span>    <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">class</span><span class=\"si\">}</span><span class=\"s2\">::</span><span class=\"si\">#{</span><span class=\"n\">raw_category</span><span class=\"p\">.</span><span class=\"nf\">upcase</span><span class=\"si\">}</span><span class=\"s2\">\"</span>  <span class=\"k\">end</span><span class=\"k\">end</span></code></pre></div></div><p>With this, the value object is now displayed as a constant when inspecting the object or in logs:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Before we had:</span><span class=\"n\">pry</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"no\">Ship</span><span class=\"o\">::</span><span class=\"no\">Category</span><span class=\"o\">::</span><span class=\"no\">SHUTTLE</span><span class=\"c1\"># =&gt; #&lt;Ship::Category:0x00007fbddc853350 @raw_category=\"shuttle\"&gt;</span><span class=\"c1\"># Now we have</span><span class=\"n\">pry</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"no\">Ship</span><span class=\"o\">::</span><span class=\"no\">Category</span><span class=\"o\">::</span><span class=\"no\">SHUTTLE</span><span class=\"c1\"># =&gt; Ship::Category::SHUTTLE</span></code></pre></div></div><!-- As I write this, I realize that this might be one of those time where Ruby allows you to do --><hr /><p>Besides indulging in my whims, there are other interesting reasons to override inspect:</p><ul>  <li>This is useful to hide sensitive values like emails or encrypted passwords, as <a href=\"https://github.com/heartcombo/devise/blob/v4.7.1/lib/devise/models/authenticatable.rb#L120-L125\">Devise does it</a>.</li>  <li>Since Rails 6, you can <a href=\"https://github.com/rails/rails/pull/33756/files\">configure ActiveRecord to filter attributes from inspection</a>. This is also done by <a href=\"https://github.com/rails/rails/pull/33756\">overriding the <code class=\"highlighter-rouge\">inspect</code> method</a>.</li>  <li>The <code class=\"highlighter-rouge\">IPAddr</code> class also <a href=\"https://github.com/ruby/ruby/blob/v2_7_0/lib/ipaddr.rb#L457-L468\">overrides the inspect method</a> to display a human readable representation of the IP address.</li></ul><p><small>The code examples in this post are also available <a href=\"https://github.com/aliou/ships-category\" target=\"blank\">on GitHub</a>.Thanks to <a href=\"https://twitter.com/caouibachir\" target=\"_blank\">Bachir Çaoui</a> and Stéphanie Chhim for reviewing a draft version of this post.</small></p><hr /><div class=\"footnotes\" role=\"doc-endnotes\">  <ol>    <li id=\"fn:1\" role=\"doc-endnote\">      <p>Of course, we could look at the file defining the constants, but where would be the fun in that? <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>    </li>    <li id=\"fn:2\" role=\"doc-endnote\">      <p>Because our constants are set directly in the class, the <code class=\"highlighter-rouge\">new</code> method needs to be already defined, hence defining them under the initialize method. <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>    </li>  </ol></div>",
            "url": "/posts/2020/02/overriding-inspect/",
            
            
            
            "tags": ["ruby","rails"],
            
            "date_published": "2020-02-18T00:00:00+00:00",
            "date_modified": "2020-02-18T00:00:00+00:00",
            
                "author":  {
                "name": "Aliou Diallo",
                "url": "https://aliou.me"
                }
                
            
        },
    
        {
            "id": "/posts/2019/10/attributes-api-and-value-objects/",
            "title": "Using Rails's Attributes API to serialize Value Objects",
            "summary": "How the Rails's Attributes API allows you to use value object in association with your models.",
            "content_text": "Continuing my deep dive into Rails features 1, I recently read about the Attributes API andmore particularly about how it can be used with custom types.The attribute APIThe attributes method allows you to define an attribute with a type on a model. This type can be a completely custom.In our example, we have spaceships that are defined by their category. Those categories are both immutable and interchangeable, and are good candidates to be transformed into value objects.Our current model looks like this:# app/models/ship.rbclass Ship &lt; ApplicationRecord  validates :name, presence: true  validates :category, presence: true  validates :category, inclusion: { in: Ship::Category::VALID_CATEGORIES }endAnd our Ship::Category value type looks like this:# app/models/ship/category.rbclass Ship::Category  VALID_CATEGORIES = %w(    shuttle supply_carrier troop_carrier war_ship  ).freeze  def initialize(category)    raise \"invalid category '#{category.inspect}'\" unless category.in?(VALID_CATEGORIES)    @raw_category = category  end  def to_s    raw_category  end  # Conform to comparable.  def &lt;=&gt;(other)    VALID_CATEGORIES.index(to_s) &lt;=&gt; VALID_CATEGORIES.index(other.to_s)  end  private  attr_reader :raw_categoryendNow, let’s update our model to retrieve our value object:# app/models/ship.rbclass Ship &lt; ApplicationRecord  # ...  def category    @category ||= Ship::Category.new(self[:category])  endendWhile this does what we want, this can be improved by creating a custom type.Creating a custom typeWe create our custom type by inheriting from ActiveRecord::Type::Value and overriding the necessary methods:  type is the type of our object when saved in the database. In our case this will be :string.  cast is the method called by ActiveRecord when setting the attribute in the model.In our case, we will instantiate our value object.  deserialize converts the value from the database to our value object. By default it calls cast.  serialize converts our value object to a type that the database understands. In our case, we’ll send back the string containing the raw category.For our type it looks like this:# app/types/ship_category.rbclass CategoryType &lt; ActiveRecord::Type::Value  def type    :string  end  def cast(value)    Ship::Category.new(value)  end  def deserialize(value)    cast(value)  end  def serialize(value)    value.to_s  endendRegistering our typeNow that our type is created, we need to register it so ActiveRecord knows about it:# config/initializers/types.rbActiveRecord::Type.register(:ship_category, CategoryType)You will need to restart your Rails server or re-register your type every time you update it.Using it in our modelFinally, we can use it in our model:class Ship &lt; ApplicationRecord  attribute :category, :ship_category  validates :name, presence: true  validates :category, presence: trueendAt this point, you might be wondering: Why would I do this?Personally, I feel like it is cleaner to let Rails handle the instantiation of objects instead of the usual memoization-with-instance-variables dance.Furthermore, it allows you to add additional features to your model without having pollute the model class. In our case, we allow our ships to be compared based on their categories by implementing Comparable in our Category.However, there are ways to make this particular use case fall down. In our example above, we limit the category to the values defined in VALID_CATEGORIES. This means that creating a row in our database with a value that isn’t valid will make our application raise when trying to instantiate the row into a Ship object:INSERT INTO ships(id, name, category, created_at, updated_at)VALUES (10, 'USS Enterprise', 'interstellar_liner', NOW(), NOW());enterprise = Ship.find(10)# =&gt; Error: invalid category 'interstellar_liner'For the purpose of this blog post, I chose a fairly simple example to present the attributes API.To achieve a similar result, you could also define the categories as a ActiveRecord Enum, as a Postgres Enum2 or even have them in their own table and have a Postgres association between a Ship and its category, that is backed by a foreign key to achieve integrity of your data.Thanks to Bachir Çaoui and Baicheng Yu for reviewing draft versions of this post.Further reading  Martin Fowler’s post on Value Objects.  A post on using the Attributes API with JSONB.            See my previous post about Namespaced Rails validators. &#8617;              However, this would require you to change your schema format to :sql or to override Rails’s Schema dumper to handle Postgres Enums (But more on that in a future post). &#8617;      ",
            "content_html": "<p>Continuing my deep dive into Rails features <sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>, I recently read about the <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html\" target=\"_blank\">Attributes API</a> andmore particularly about how it can be used with custom types.</p><h3 id=\"the-attribute-api\">The <code class=\"highlighter-rouge\">attribute</code> API</h3><p>The <code class=\"highlighter-rouge\">attributes</code> method allows you to define an attribute with a type on a model. This type can be a completely custom.</p><p>In our example, we have spaceships that are defined by their category. Those categories are both immutable and interchangeable, and are good candidates to be transformed into <a href=\"https://www.martinfowler.com/bliki/ValueObject.html\" target=\"_blank\">value objects</a>.</p><p>Our current model looks like this:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># app/models/ship.rb</span><span class=\"k\">class</span> <span class=\"nc\">Ship</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>  <span class=\"n\">validates</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">presence: </span><span class=\"kp\">true</span>  <span class=\"n\">validates</span> <span class=\"ss\">:category</span><span class=\"p\">,</span> <span class=\"ss\">presence: </span><span class=\"kp\">true</span>  <span class=\"n\">validates</span> <span class=\"ss\">:category</span><span class=\"p\">,</span> <span class=\"ss\">inclusion: </span><span class=\"p\">{</span> <span class=\"ss\">in: </span><span class=\"no\">Ship</span><span class=\"o\">::</span><span class=\"no\">Category</span><span class=\"o\">::</span><span class=\"no\">VALID_CATEGORIES</span> <span class=\"p\">}</span><span class=\"k\">end</span></code></pre></div></div><p>And our <code class=\"highlighter-rouge\">Ship::Category</code> value type looks like this:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># app/models/ship/category.rb</span><span class=\"k\">class</span> <span class=\"nc\">Ship</span><span class=\"o\">::</span><span class=\"no\">Category</span>  <span class=\"no\">VALID_CATEGORIES</span> <span class=\"o\">=</span> <span class=\"sx\">%w(    shuttle supply_carrier troop_carrier war_ship  )</span><span class=\"p\">.</span><span class=\"nf\">freeze</span>  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"p\">)</span>    <span class=\"k\">raise</span> <span class=\"s2\">\"invalid category '</span><span class=\"si\">#{</span><span class=\"n\">category</span><span class=\"p\">.</span><span class=\"nf\">inspect</span><span class=\"si\">}</span><span class=\"s2\">'\"</span> <span class=\"k\">unless</span> <span class=\"n\">category</span><span class=\"p\">.</span><span class=\"nf\">in?</span><span class=\"p\">(</span><span class=\"no\">VALID_CATEGORIES</span><span class=\"p\">)</span>    <span class=\"vi\">@raw_category</span> <span class=\"o\">=</span> <span class=\"n\">category</span>  <span class=\"k\">end</span>  <span class=\"k\">def</span> <span class=\"nf\">to_s</span>    <span class=\"n\">raw_category</span>  <span class=\"k\">end</span>  <span class=\"c1\"># Conform to comparable.</span>  <span class=\"k\">def</span> <span class=\"nf\">&lt;</span><span class=\"o\">=&gt;</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>    <span class=\"no\">VALID_CATEGORIES</span><span class=\"p\">.</span><span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"nb\">to_s</span><span class=\"p\">)</span> <span class=\"o\">&lt;=&gt;</span> <span class=\"no\">VALID_CATEGORIES</span><span class=\"p\">.</span><span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"nf\">to_s</span><span class=\"p\">)</span>  <span class=\"k\">end</span>  <span class=\"kp\">private</span>  <span class=\"nb\">attr_reader</span> <span class=\"ss\">:raw_category</span><span class=\"k\">end</span></code></pre></div></div><p>Now, let’s update our model to retrieve our value object:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># app/models/ship.rb</span><span class=\"k\">class</span> <span class=\"nc\">Ship</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>  <span class=\"c1\"># ...</span>  <span class=\"k\">def</span> <span class=\"nf\">category</span>    <span class=\"vi\">@category</span> <span class=\"o\">||=</span> <span class=\"no\">Ship</span><span class=\"o\">::</span><span class=\"no\">Category</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"nb\">self</span><span class=\"p\">[</span><span class=\"ss\">:category</span><span class=\"p\">])</span>  <span class=\"k\">end</span><span class=\"k\">end</span></code></pre></div></div><p>While this does what we want, this can be improved by creating a custom type.</p><h3 id=\"creating-a-custom-type\">Creating a custom type</h3><p>We create our custom type by inheriting from <code class=\"highlighter-rouge\">ActiveRecord::Type::Value</code> and overriding the necessary methods:</p><ul>  <li><code class=\"highlighter-rouge\">type</code> is the type of our object when saved in the database. In our case this will be <code class=\"highlighter-rouge\">:string</code>.</li>  <li><code class=\"highlighter-rouge\">cast</code> is the method called by ActiveRecord when setting the attribute in the model.In our case, we will instantiate our value object.</li>  <li><code class=\"highlighter-rouge\">deserialize</code> converts the value from the database to our value object. By default it calls <code class=\"highlighter-rouge\">cast</code>.</li>  <li><code class=\"highlighter-rouge\">serialize</code> converts our value object to a type that the database understands. In our case, we’ll send back the string containing the raw category.</li></ul><p>For our type it looks like this:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># app/types/ship_category.rb</span><span class=\"k\">class</span> <span class=\"nc\">CategoryType</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Type</span><span class=\"o\">::</span><span class=\"no\">Value</span>  <span class=\"k\">def</span> <span class=\"nf\">type</span>    <span class=\"ss\">:string</span>  <span class=\"k\">end</span>  <span class=\"k\">def</span> <span class=\"nf\">cast</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>    <span class=\"no\">Ship</span><span class=\"o\">::</span><span class=\"no\">Category</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>  <span class=\"k\">end</span>  <span class=\"k\">def</span> <span class=\"nf\">deserialize</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>    <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>  <span class=\"k\">end</span>  <span class=\"k\">def</span> <span class=\"nf\">serialize</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>    <span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">to_s</span>  <span class=\"k\">end</span><span class=\"k\">end</span></code></pre></div></div><h3 id=\"registering-our-type\">Registering our type</h3><p>Now that our type is created, we need to register it so ActiveRecord knows about it:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># config/initializers/types.rb</span><span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Type</span><span class=\"p\">.</span><span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"ss\">:ship_category</span><span class=\"p\">,</span> <span class=\"no\">CategoryType</span><span class=\"p\">)</span></code></pre></div></div><p><small class=\"ma0\">You will need to restart your Rails server or re-register your type every time you update it.</small></p><h3 id=\"using-it-in-our-model\">Using it in our model</h3><p>Finally, we can use it in our model:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Ship</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>  <span class=\"n\">attribute</span> <span class=\"ss\">:category</span><span class=\"p\">,</span> <span class=\"ss\">:ship_category</span>  <span class=\"n\">validates</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">presence: </span><span class=\"kp\">true</span>  <span class=\"n\">validates</span> <span class=\"ss\">:category</span><span class=\"p\">,</span> <span class=\"ss\">presence: </span><span class=\"kp\">true</span><span class=\"k\">end</span></code></pre></div></div><hr /><p>At this point, you might be wondering: <em>Why would I do this?</em>Personally, I feel like it is <em>cleaner</em> to let Rails handle the instantiation of objects instead of the usual memoization-with-instance-variables dance.</p><p>Furthermore, it allows you to add additional features to your model without having pollute the model class. In our case, we allow our ships to be compared based on their categories by implementing <a href=\"https://ruby-doc.org/core/Comparable.html\" target=\"_blank\">Comparable</a> in our Category.</p><p>However, there are ways to make this particular use case fall down. In our example above, we limit the category to the values defined in <code class=\"highlighter-rouge\">VALID_CATEGORIES</code>. This means that creating a row in our database with a value that isn’t valid will make our application raise when trying to instantiate the row into a <code class=\"highlighter-rouge\">Ship</code> object:</p><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">ships</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"p\">,</span> <span class=\"n\">created_at</span><span class=\"p\">,</span> <span class=\"n\">updated_at</span><span class=\"p\">)</span><span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'USS Enterprise'</span><span class=\"p\">,</span> <span class=\"s1\">'interstellar_liner'</span><span class=\"p\">,</span> <span class=\"n\">NOW</span><span class=\"p\">(),</span> <span class=\"n\">NOW</span><span class=\"p\">());</span></code></pre></div></div><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">enterprise</span> <span class=\"o\">=</span> <span class=\"no\">Ship</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"c1\"># =&gt; Error: invalid category 'interstellar_liner'</span></code></pre></div></div><hr /><p>For the purpose of this blog post, I chose a fairly simple example to present the attributes API.To achieve a similar result, you could also define the categories as a ActiveRecord Enum, as a Postgres Enum<sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup> or even have them in their own table and have a Postgres association between a Ship and its category, that is backed by a foreign key to achieve integrity of your data.</p><p><small>Thanks to <a href=\"https://twitter.com/caouibachir\" target=\"_blank\">Bachir Çaoui</a> and Baicheng Yu for reviewing draft versions of this post.</small></p><hr /><h4 id=\"further-reading\">Further reading</h4><ul>  <li>Martin Fowler’s <a href=\"https://www.martinfowler.com/bliki/ValueObject.html\" target=\"_blank\">post on Value Objects</a>.</li>  <li>A <a href=\"https://jetrockets.pro/blog/rails-5-attributes-api-value-objects-and-jsonb\" target=\"_blank\">post on using the Attributes API with JSONB</a>.</li></ul><div class=\"footnotes\" role=\"doc-endnotes\">  <ol>    <li id=\"fn:1\" role=\"doc-endnote\">      <p>See my previous post about <a href=\"/posts/2018/08/namespaced-rails-validators/\">Namespaced Rails validators</a>. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>    </li>    <li id=\"fn:2\" role=\"doc-endnote\">      <p>However, this would require you to change your schema format to <code class=\"highlighter-rouge\">:sql</code> or to override Rails’s Schema dumper to handle Postgres Enums (But more on that in a future post). <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>    </li>  </ol></div>",
            "url": "/posts/2019/10/attributes-api-and-value-objects/",
            "image": "https://img.aliou.me/blog/spacex-falcon-9-rocket.jpg",
            
            
            
            
            "date_published": "2019-10-08T00:00:00+00:00",
            "date_modified": "2019-10-08T00:00:00+00:00",
            
                "author":  {
                "name": "Aliou Diallo",
                "url": "https://aliou.me"
                }
                
            
        },
    
        {
            "id": "/posts/2019/01/three-ways-to-ignore-files-in-git/",
            "title": "Three ways to ignore files in Git",
            "summary": "There are different ways to ignore files in a Git repository, each with their own uses.\n",
            "content_text": "TIL I learned that there are different ways to ignore files in Git:1. Using a .gitignore file in a repositoryWhen created in a Git repository, this .gitignore is only applied to thedirectory it is in and its children. This means that you can ignore files in thewhole repository and also ignore some files in some subdirectories.Start by creating a .gitignore in a subdirectory:# lib/.gitignore*.mdWith the following directory structure:.├── lib│   ├── .gitignore│   ├── todo.md        # &lt;- Will be ignored└── Readme.md          # &lt;- Will not be ignoredThis file should be version-controlled and includes files that all developers working on the repository will want to ignore.2. Using the local exclusion file .git/info/excludeStart by creating the info directory and the exclude file in our repository.git directory:mkdir -p .git/infotouch excludeThen you can add files or pattern of files you want to ignore:TODO.mdNOTES.txtI mainly use it to ignore files that do not need to be shared with other developers.I usually leave notes a list of TODOs at the root of a project and ignore them in this file.3. Using a global .gitignoreStart by making a .gitignore file in your home directory,with the files you want to ignore, and place in your home directory:# ~/.gitignore.vimrc.local*.swp.idea.DS_StoreThen, tell Git to use this file as global .gitignore by running in your shell:git config --global core.excludesfile ~/.gitignoreI use it to ignore file I never want to be committed, e.g. backup or temporaryfiles, build  artifacts, etc.Further reading  Documentation for gitignore.",
            "content_html": "<p>TIL I learned that there are different ways to ignore files in Git:</p><h3 id=\"1-using-a-gitignore-file-in-a-repository\">1. Using a <code class=\"highlighter-rouge\">.gitignore</code> file in a repository</h3><p>When created in a Git repository, this <code class=\"highlighter-rouge\">.gitignore</code> is only applied to thedirectory it is in and its children. This means that you can ignore files in thewhole repository and also ignore some files in some subdirectories.</p><p>Start by creating a <code class=\"highlighter-rouge\">.gitignore</code> in a subdirectory:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># lib/.gitignore</span><span class=\"k\">*</span>.md</code></pre></div></div><p>With the following directory structure:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>├── lib│   ├── .gitignore│   ├── todo.md        <span class=\"c\"># &lt;- Will be ignored</span>└── Readme.md          <span class=\"c\"># &lt;- Will not be ignored</span></code></pre></div></div><p>This file should be version-controlled and includes files that all developers working on the repository will want to ignore.</p><h3 id=\"2-using-the-local-exclusion-file-gitinfoexclude\">2. Using the local exclusion file <code class=\"highlighter-rouge\">.git/info/exclude</code></h3><p>Start by creating the <code class=\"highlighter-rouge\">info</code> directory and the exclude file in our repository<code class=\"highlighter-rouge\">.git</code> directory:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> .git/info<span class=\"nb\">touch </span>exclude</code></pre></div></div><p>Then you can add files or pattern of files you want to ignore:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>TODO.mdNOTES.txt</code></pre></div></div><p>I mainly use it to ignore files that do not need to be shared with other developers.I usually leave notes a list of TODOs at the root of a project and ignore them in this file.</p><h3 id=\"3-using-a-global-gitignore\">3. Using a global <code class=\"highlighter-rouge\">.gitignore</code></h3><p>Start by making a <code class=\"highlighter-rouge\">.gitignore</code> file in your home directory,with the files you want to ignore, and place in your home directory:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># ~/.gitignore</span>.vimrc.local<span class=\"k\">*</span>.swp.idea.DS_Store</code></pre></div></div><p>Then, tell Git to use this file as global <code class=\"highlighter-rouge\">.gitignore</code> by running in your shell:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git config <span class=\"nt\">--global</span> core.excludesfile ~/.gitignore</code></pre></div></div><p>I use it to ignore file I never want to be committed, e.g. backup or temporaryfiles, build  artifacts, etc.</p><hr /><h4 id=\"further-reading\">Further reading</h4><ul>  <li>Documentation for <a href=\"https://git-scm.com/docs/gitignore\" target=\"_blank\"><code class=\"highlighter-rouge\">gitignore</code></a>.</li></ul>",
            "url": "/posts/2019/01/three-ways-to-ignore-files-in-git/",
            
            
            
            "tags": ["git","tools","til"],
            
            "date_published": "2019-01-17T00:00:00+00:00",
            "date_modified": "2019-01-17T00:00:00+00:00",
            
                "author":  {
                "name": "Aliou Diallo",
                "url": "https://aliou.me"
                }
                
            
        },
    
        {
            "id": "/posts/2018/09/postgres-tsranges-in-ecto/",
            "title": "Postgres timestamp ranges in Ecto",
            "summary": "Making a custom `Ecto.Type` to use a native Postgres type",
            "content_text": "I recently read a post on Postgres’s range types and havebeen trying to take advantage of them in my code.However, because some of these types aren’t shared between the different SQLdatabases, most Object Relation Mapping like Ruby on Rails’s ActiveRecord anddatabase wrappers (e.g. Elixir’s Ecto) don’t support them.Thankfully, Ecto allows us to define our custom types that can represent anunknown database type. We’ll now try to implement one to represent timestampranges.Let’s say we need to schedule chores between different members of a team in a spaceship. 1The simplest way to do this would be to store the range of our chore and who isassigned to it. With Ecto, the migration creating this table would look like this:create table(:chores) do  add(:user_id, references(\"users\"), null: false)  add(:note, :string)  add(:range, :tsrange, null: false)  timestamps(default: fragment(\"NOW()\"))endWe also need to make sure a user can’t have multiple chores overlapping witheach other. For this we’ll add an exclusion constraint on our range:# Add the btree_gist extension to allow using `gist` indexes# with scalar types, in our case the `user_id`.execute(\"CREATE EXTENSION btree_gist\")create(  constraint(    \"chores\",    :no_overlaping_chores_for_user,    exclude: ~s|gist (user_id with =, range with &amp;&amp;)|  ))Creating the schemaWe now create our schema representing a chore in the application. Let’s try touse the :tsrange as the type of our chore range:defmodule Chore do  use Ecto.Schema  schema \"chores\" do    field(:note, :string)    field(:range, :tsrange)    belongs_to(:user, User)    timestamps()  end  def changeset(chore, attrs) do    chore    |&gt; cast(attrs, [:user_id, :note, :range])    |&gt; validate_required([:user_id, :range])  endendWhen compiling this, we have an error:== Compilation error in file lib/chore.ex ==** (ArgumentError) invalid or unknown type :tsrange    for field :rangeBecause :tsrange is not a type known by Ecto, we will need to create our own typeadopting the Ecto.Type behaviour.But first we’ll create a struct that represents a timestamp range.Representing our RangeWe define our Timestamp.Range as a struct with the first and last elements of therange and with options for the inclusivity of those elements in the range.defmodule Timestamp.Range do  defstruct [:first, :last, opts: []]  @type t :: %__MODULE__{          first: NaiveDateTime.t(),          last: NaiveDateTime.t(),          opts: [            lower_inclusive: boolean(),            upper_inclusive: boolean()          ]        }endWe also define a convenience function to create a Timestamp.Range:@default_opts [lower_inclusive: true, upper_inclusive: false]@spec new(NaiveDateTime.t(), NaiveDateTime.t(), Keyword.t()) :: tdef new(first, last, opts \\\\ []) do    opts = Keyword.merge(@default_opts, opts)    %__MODULE__{      first: first,      last: last,      opts: opts    }endWe can now represent a Postgres’s tsrange in Elixir.Implementing the Ecto.Type behaviourThe Ecto.Type behaviour expects four functions to be defined:  type/0: The underlying type of our custom type, known by either Ecto or  Postgrex  cast/1: A function to transform anything into our custom type.  load/1: A function to transform something from the database into our custom  type.  dump/1: A function to transform our custom type into something understood by  the database.The type implementation:def type, do: :tsrangeThe cast implementation: we only allow our custom typeto be cast:def cast(%Timestamp.Range{} = range), do: {:ok, range}def cast(_), do: :errorThe load implementation receives a Postgrex.Range and transforms it to aTimestamp.Range:def load(%Postgrex.Range{} = range) do  {:ok,    Timestamp.Range.new(      range.lower,      range.upper,      lower_inclusive: range.lower_inclusive,      upper_inclusive: range.upper_inclusive    )}enddef load(_), do: :errorAnd finally, the dump implementation takes a Timestamp.Range and transformsit to a Postgrex.Range:def dump(%Timestamp.Range{} = range) do  [lower_inclusive: lower_inclusive, upper_inclusive: upper_inclusive] = range.opts  {:ok,    %Postgrex.Range{      lower: range.first,      upper: range.last,      lower_inclusive: lower_inclusive,      upper_inclusive: upper_inclusive    }}enddef dump(_), do: :errorUsing our new type in the schemaNow that we have our custom Ecto type, we can use it in our schema:schema \"chores\" do  field(:note, :string)  field(:range, Timestamp.Range)  belongs_to(:user, User)  timestamps()endAnd we can insert new chores into the table:iex(1)&gt; range_start = ~N[2018-09-17 10:00:00]iex(2)&gt; range_end = ~N[2018-09-17 12:00:00]iex(3)&gt; attrs = %{user_id: 1, range: Timestamp.Range.new(range_start, range_end)}iex(4)&gt; Chore.changeset(%Chore{}, attrs) |&gt; Repo.insert!%Radch.Chore{  __meta__: #Ecto.Schema.Metadata&lt;:loaded, \"chores\"&gt;,  id: 1,  note: nil,  range: #Timestamp.Range&lt;~N[2018-09-17 10:00:00], ~N[2018-09-17 12:00:00]&gt;,  user_id: 1  updated_at: ~N[2018-09-17 16:30:05],  inserted_at: ~N[2018-09-17 16:30:05],}The code examples in this post are also available on GitHub.Thanks to Bachir Çaoui for reviewing adraft version of this post.Further reading  Documentation on the Ecto.Type behaviour  Documentation on Postgres’ range types  More reading on Postgres’ range types            If you know me this might be familiar. &#8617;      ",
            "content_html": "<p>I recently read a post on <a href=\"https://tapoueh.org/blog/2018/04/postgresql-data-types-ranges\" target=\"blank\">Postgres’s range types</a> and havebeen trying to take advantage of them in my code.</p><p>However, because some of these types aren’t shared between the different SQLdatabases, most Object Relation Mapping like <a href=\"https://guides.rubyonrails.org/active_record_basics.html\">Ruby on Rails’s ActiveRecord</a> anddatabase wrappers (e.g. <a href=\"https://hexdocs.pm/ecto/Ecto.html\" target=\"blank\">Elixir’s Ecto</a>) don’t support them.</p><p>Thankfully, Ecto allows us to define our custom types that can represent anunknown database type. We’ll now try to implement one to represent timestampranges.</p><hr /><p>Let’s say we need to schedule chores between different members of a team in a spaceship. <sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup></p><p>The simplest way to do this would be to store the range of our chore and who isassigned to it. With Ecto, the migration creating this table would look like this:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">create</span> <span class=\"n\">table</span><span class=\"p\">(</span><span class=\"ss\">:chores</span><span class=\"p\">)</span> <span class=\"k\">do</span>  <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"ss\">:user_id</span><span class=\"p\">,</span> <span class=\"n\">references</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">),</span> <span class=\"ss\">null:</span> <span class=\"no\">false</span><span class=\"p\">)</span>  <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"ss\">:note</span><span class=\"p\">,</span> <span class=\"ss\">:string</span><span class=\"p\">)</span>  <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"ss\">:range</span><span class=\"p\">,</span> <span class=\"ss\">:tsrange</span><span class=\"p\">,</span> <span class=\"ss\">null:</span> <span class=\"no\">false</span><span class=\"p\">)</span>  <span class=\"n\">timestamps</span><span class=\"p\">(</span><span class=\"ss\">default:</span> <span class=\"n\">fragment</span><span class=\"p\">(</span><span class=\"s2\">\"NOW()\"</span><span class=\"p\">))</span><span class=\"k\">end</span></code></pre></div></div><p>We also need to make sure a user can’t have multiple chores overlapping witheach other. For this we’ll add <a href=\"https://www.postgresql.org/docs/current/static/ddl-constraints.html#DDL-CONSTRAINTS-EXCLUSION\" target=\"blank\">an exclusion constraint</a> on our range:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Add the btree_gist extension to allow using `gist` indexes</span><span class=\"c1\"># with scalar types, in our case the `user_id`.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"CREATE EXTENSION btree_gist\"</span><span class=\"p\">)</span><span class=\"n\">create</span><span class=\"p\">(</span>  <span class=\"n\">constraint</span><span class=\"p\">(</span>    <span class=\"s2\">\"chores\"</span><span class=\"p\">,</span>    <span class=\"ss\">:no_overlaping_chores_for_user</span><span class=\"p\">,</span>    <span class=\"ss\">exclude:</span> <span class=\"sx\">~s|gist (user_id with =, range with &amp;&amp;)|</span>  <span class=\"p\">)</span><span class=\"p\">)</span></code></pre></div></div><h3 id=\"creating-the-schema\">Creating the schema</h3><p>We now create our schema representing a chore in the application. Let’s try touse the <code class=\"highlighter-rouge\">:tsrange</code> as the type of our chore range:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">defmodule</span> <span class=\"no\">Chore</span> <span class=\"k\">do</span>  <span class=\"kn\">use</span> <span class=\"no\">Ecto</span><span class=\"o\">.</span><span class=\"no\">Schema</span>  <span class=\"n\">schema</span> <span class=\"s2\">\"chores\"</span> <span class=\"k\">do</span>    <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"ss\">:note</span><span class=\"p\">,</span> <span class=\"ss\">:string</span><span class=\"p\">)</span>    <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"ss\">:range</span><span class=\"p\">,</span> <span class=\"ss\">:tsrange</span><span class=\"p\">)</span>    <span class=\"n\">belongs_to</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">,</span> <span class=\"no\">User</span><span class=\"p\">)</span>    <span class=\"n\">timestamps</span><span class=\"p\">()</span>  <span class=\"k\">end</span>  <span class=\"k\">def</span> <span class=\"n\">changeset</span><span class=\"p\">(</span><span class=\"n\">chore</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">)</span> <span class=\"k\">do</span>    <span class=\"n\">chore</span>    <span class=\"o\">|&gt;</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">attrs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"ss\">:user_id</span><span class=\"p\">,</span> <span class=\"ss\">:note</span><span class=\"p\">,</span> <span class=\"ss\">:range</span><span class=\"p\">])</span>    <span class=\"o\">|&gt;</span> <span class=\"n\">validate_required</span><span class=\"p\">([</span><span class=\"ss\">:user_id</span><span class=\"p\">,</span> <span class=\"ss\">:range</span><span class=\"p\">])</span>  <span class=\"k\">end</span><span class=\"k\">end</span></code></pre></div></div><p>When compiling this, we have an error:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>== Compilation error in file lib/chore.ex ==** (ArgumentError) invalid or unknown type :tsrange    for field :range</code></pre></div></div><p>Because <code class=\"highlighter-rouge\">:tsrange</code> is not a type known by Ecto, we will need to create our own typeadopting the <a href=\"https://hexdocs.pm/ecto/3.0.6/Ecto.Type.html\" target=\"_blank\"><code class=\"highlighter-rouge\">Ecto.Type</code> behaviour</a>.But first we’ll create a struct that represents a timestamp range.</p><h3 id=\"representing-our-range\">Representing our Range</h3><p>We define our <code class=\"highlighter-rouge\">Timestamp.Range</code> as a struct with the first and last elements of therange and with options for the inclusivity of those elements in the range.</p><!--We allow `nil` values to represent the lack of first and last elements: aninfinite range.--><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">defmodule</span> <span class=\"no\">Timestamp</span><span class=\"o\">.</span><span class=\"no\">Range</span> <span class=\"k\">do</span>  <span class=\"k\">defstruct</span> <span class=\"p\">[</span><span class=\"ss\">:first</span><span class=\"p\">,</span> <span class=\"ss\">:last</span><span class=\"p\">,</span> <span class=\"ss\">opts:</span> <span class=\"p\">[]]</span>  <span class=\"nv\">@type</span> <span class=\"n\">t</span> <span class=\"p\">::</span> <span class=\"p\">%</span><span class=\"bp\">__MODULE__</span><span class=\"p\">{</span>          <span class=\"ss\">first:</span> <span class=\"no\">NaiveDateTime</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">(),</span>          <span class=\"ss\">last:</span> <span class=\"no\">NaiveDateTime</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">(),</span>          <span class=\"ss\">opts:</span> <span class=\"p\">[</span>            <span class=\"ss\">lower_inclusive:</span> <span class=\"n\">boolean</span><span class=\"p\">(),</span>            <span class=\"ss\">upper_inclusive:</span> <span class=\"n\">boolean</span><span class=\"p\">()</span>          <span class=\"p\">]</span>        <span class=\"p\">}</span><span class=\"k\">end</span></code></pre></div></div><p>We also define a convenience function to create a <code class=\"highlighter-rouge\">Timestamp.Range</code>:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">@default_opts</span> <span class=\"p\">[</span><span class=\"ss\">lower_inclusive:</span> <span class=\"no\">true</span><span class=\"p\">,</span> <span class=\"ss\">upper_inclusive:</span> <span class=\"no\">false</span><span class=\"p\">]</span><span class=\"nv\">@spec</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"no\">NaiveDateTime</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">(),</span> <span class=\"no\">NaiveDateTime</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">(),</span> <span class=\"no\">Keyword</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">())</span> <span class=\"p\">::</span> <span class=\"n\">t</span><span class=\"k\">def</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"p\">,</span> <span class=\"n\">opts</span> <span class=\"p\">\\\\</span> <span class=\"p\">[])</span> <span class=\"k\">do</span>    <span class=\"n\">opts</span> <span class=\"o\">=</span> <span class=\"no\">Keyword</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"nv\">@default_opts</span><span class=\"p\">,</span> <span class=\"n\">opts</span><span class=\"p\">)</span>    <span class=\"p\">%</span><span class=\"bp\">__MODULE__</span><span class=\"p\">{</span>      <span class=\"ss\">first:</span> <span class=\"n\">first</span><span class=\"p\">,</span>      <span class=\"ss\">last:</span> <span class=\"n\">last</span><span class=\"p\">,</span>      <span class=\"ss\">opts:</span> <span class=\"n\">opts</span>    <span class=\"p\">}</span><span class=\"k\">end</span></code></pre></div></div><p>We can now represent a Postgres’s <code class=\"highlighter-rouge\">tsrange</code> in Elixir.</p><h3 id=\"implementing-the-ectotype-behaviour\">Implementing the <code class=\"highlighter-rouge\">Ecto.Type</code> behaviour</h3><p>The <code class=\"highlighter-rouge\">Ecto.Type</code> behaviour expects four functions to be defined:</p><ul>  <li><code class=\"highlighter-rouge\">type/0</code>: The underlying type of our custom type, known by either Ecto or  <a href=\"https://github.com/elixir-ecto/postgrex\" target=\"_blank\">Postgrex</a></li>  <li><code class=\"highlighter-rouge\">cast/1</code>: A function to transform anything into our custom type.</li>  <li><code class=\"highlighter-rouge\">load/1</code>: A function to transform something from the database into our custom  type.</li>  <li><code class=\"highlighter-rouge\">dump/1</code>: A function to transform our custom type into something understood by  the database.</li></ul><p>The <code class=\"highlighter-rouge\">type</code> implementation:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"k\">do</span><span class=\"p\">:</span> <span class=\"ss\">:tsrange</span></code></pre></div></div><p>The <code class=\"highlighter-rouge\">cast</code> implementation: we only allow our custom typeto be cast:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"n\">cast</span><span class=\"p\">(%</span><span class=\"no\">Timestamp</span><span class=\"o\">.</span><span class=\"no\">Range</span><span class=\"p\">{}</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">),</span> <span class=\"k\">do</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"ss\">:ok</span><span class=\"p\">,</span> <span class=\"n\">range</span><span class=\"p\">}</span><span class=\"k\">def</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span> <span class=\"k\">do</span><span class=\"p\">:</span> <span class=\"ss\">:error</span></code></pre></div></div><p>The <code class=\"highlighter-rouge\">load</code> implementation receives a <code class=\"highlighter-rouge\">Postgrex.Range</code> and transforms it to a<code class=\"highlighter-rouge\">Timestamp.Range</code>:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"n\">load</span><span class=\"p\">(%</span><span class=\"no\">Postgrex</span><span class=\"o\">.</span><span class=\"no\">Range</span><span class=\"p\">{}</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">)</span> <span class=\"k\">do</span>  <span class=\"p\">{</span><span class=\"ss\">:ok</span><span class=\"p\">,</span>    <span class=\"no\">Timestamp</span><span class=\"o\">.</span><span class=\"no\">Range</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span>      <span class=\"n\">range</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">,</span>      <span class=\"n\">range</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">,</span>      <span class=\"ss\">lower_inclusive:</span> <span class=\"n\">range</span><span class=\"o\">.</span><span class=\"n\">lower_inclusive</span><span class=\"p\">,</span>      <span class=\"ss\">upper_inclusive:</span> <span class=\"n\">range</span><span class=\"o\">.</span><span class=\"n\">upper_inclusive</span>    <span class=\"p\">)}</span><span class=\"k\">end</span><span class=\"k\">def</span> <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span> <span class=\"k\">do</span><span class=\"p\">:</span> <span class=\"ss\">:error</span></code></pre></div></div><p>And finally, the <code class=\"highlighter-rouge\">dump</code> implementation takes a <code class=\"highlighter-rouge\">Timestamp.Range</code> and transformsit to a <code class=\"highlighter-rouge\">Postgrex.Range</code>:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"n\">dump</span><span class=\"p\">(%</span><span class=\"no\">Timestamp</span><span class=\"o\">.</span><span class=\"no\">Range</span><span class=\"p\">{}</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">)</span> <span class=\"k\">do</span>  <span class=\"p\">[</span><span class=\"ss\">lower_inclusive:</span> <span class=\"n\">lower_inclusive</span><span class=\"p\">,</span> <span class=\"ss\">upper_inclusive:</span> <span class=\"n\">upper_inclusive</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"o\">.</span><span class=\"n\">opts</span>  <span class=\"p\">{</span><span class=\"ss\">:ok</span><span class=\"p\">,</span>    <span class=\"p\">%</span><span class=\"no\">Postgrex</span><span class=\"o\">.</span><span class=\"no\">Range</span><span class=\"p\">{</span>      <span class=\"ss\">lower:</span> <span class=\"n\">range</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">,</span>      <span class=\"ss\">upper:</span> <span class=\"n\">range</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">,</span>      <span class=\"ss\">lower_inclusive:</span> <span class=\"n\">lower_inclusive</span><span class=\"p\">,</span>      <span class=\"ss\">upper_inclusive:</span> <span class=\"n\">upper_inclusive</span>    <span class=\"p\">}}</span><span class=\"k\">end</span><span class=\"k\">def</span> <span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span> <span class=\"k\">do</span><span class=\"p\">:</span> <span class=\"ss\">:error</span></code></pre></div></div><h3 id=\"using-our-new-type-in-the-schema\">Using our new type in the schema</h3><p>Now that we have our custom Ecto type, we can use it in our schema:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">schema</span> <span class=\"s2\">\"chores\"</span> <span class=\"k\">do</span>  <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"ss\">:note</span><span class=\"p\">,</span> <span class=\"ss\">:string</span><span class=\"p\">)</span>  <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"ss\">:range</span><span class=\"p\">,</span> <span class=\"no\">Timestamp</span><span class=\"o\">.</span><span class=\"no\">Range</span><span class=\"p\">)</span>  <span class=\"n\">belongs_to</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">,</span> <span class=\"no\">User</span><span class=\"p\">)</span>  <span class=\"n\">timestamps</span><span class=\"p\">()</span><span class=\"k\">end</span></code></pre></div></div><p>And we can insert new chores into the table:</p><div class=\"language-elixir highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">iex</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">range_start</span> <span class=\"o\">=</span> <span class=\"sx\">~N[2018-09-17 10:00:00]</span><span class=\"n\">iex</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">range_end</span> <span class=\"o\">=</span> <span class=\"sx\">~N[2018-09-17 12:00:00]</span><span class=\"n\">iex</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"p\">%{</span><span class=\"ss\">user_id:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ss\">range:</span> <span class=\"no\">Timestamp</span><span class=\"o\">.</span><span class=\"no\">Range</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">range_start</span><span class=\"p\">,</span> <span class=\"n\">range_end</span><span class=\"p\">)}</span><span class=\"n\">iex</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"no\">Chore</span><span class=\"o\">.</span><span class=\"n\">changeset</span><span class=\"p\">(%</span><span class=\"no\">Chore</span><span class=\"p\">{},</span> <span class=\"n\">attrs</span><span class=\"p\">)</span> <span class=\"o\">|&gt;</span> <span class=\"no\">Repo</span><span class=\"o\">.</span><span class=\"n\">insert!</span><span class=\"p\">%</span><span class=\"no\">Radch</span><span class=\"o\">.</span><span class=\"no\">Chore</span><span class=\"p\">{</span>  <span class=\"ss\">__meta__:</span> <span class=\"c1\">#Ecto.Schema.Metadata&lt;:loaded, \"chores\"&gt;,</span>  <span class=\"ss\">id:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"ss\">note:</span> <span class=\"no\">nil</span><span class=\"p\">,</span>  <span class=\"ss\">range:</span> <span class=\"c1\">#Timestamp.Range&lt;~N[2018-09-17 10:00:00], ~N[2018-09-17 12:00:00]&gt;,</span>  <span class=\"ss\">user_id:</span> <span class=\"mi\">1</span>  <span class=\"ss\">updated_at:</span> <span class=\"sx\">~N[2018-09-17 16:30:05]</span><span class=\"p\">,</span>  <span class=\"ss\">inserted_at:</span> <span class=\"sx\">~N[2018-09-17 16:30:05]</span><span class=\"p\">,</span><span class=\"p\">}</span></code></pre></div></div><p><small>The code examples in this post are also available <a href=\"https://github.com/aliou/radch\" target=\"blank\">on GitHub</a>.Thanks to <a href=\"https://twitter.com/caouibachir\" target=\"_blank\">Bachir Çaoui</a> for reviewing adraft version of this post.</small></p><hr /><h4 id=\"further-reading\">Further reading</h4><ul>  <li>Documentation on the <a href=\"https://hexdocs.pm/ecto/3.0.0/Ecto.Type.html\" target=\"_blank\"><code class=\"highlighter-rouge\">Ecto.Type</code> behaviour</a></li>  <li>Documentation on <a href=\"https://www.postgresql.org/docs/10/static/rangetypes.html\" target=\"_blank\">Postgres’ range types</a></li>  <li>More reading on <a href=\"https://tapoueh.org/blog/2018/04/postgresql-data-types-ranges\" target=\"_blank\">Postgres’ range types</a></li></ul><div class=\"footnotes\" role=\"doc-endnotes\">  <ol>    <li id=\"fn:1\" role=\"doc-endnote\">      <p>If you know me this <a href=\"https://www.snapshift.co\" target=\"_blank\">might be familiar</a>. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>    </li>  </ol></div>",
            "url": "/posts/2018/09/postgres-tsranges-in-ecto/",
            
            
            
            "tags": ["elixir","ecto","postgres"],
            
            "date_published": "2018-09-18T00:00:00+00:00",
            "date_modified": "2018-09-18T00:00:00+00:00",
            
                "author":  {
                "name": "Aliou Diallo",
                "url": "https://aliou.me"
                }
                
            
        },
    
        {
            "id": "/posts/2018/08/namespaced-rails-validators/",
            "title": "Namespaced Rails validators",
            "summary": "How to namespace custom Rails validators",
            "content_text": "While going source spelunking, I came across this piece of code in Rails’ActiveModel:key = \"#{key.to_s.camelize}Validator\"begin  validator = key.include?(\"::\".freeze) ? key.constantize : const_get(key)rescue NameError  raise ArgumentError, \"Unknown validator: '#{key}'\"endactive_model/validations/validates.rbThis means that you can namespace your custom validators:# lib/internal/email_validator.rbmodule Internal  class EmailValidator    def validate_each(record, attribute, value)      return if value.ends_with?('@private_domain.com')      record.errors.add(attribute, 'not from private domain')    end  endendAnd then use them like this:# app/models/admin.rbclass Admin &lt; ApplicationRecord  validates :email, 'internal/email': trueendThanks to Bachir Çaoui for reviewing adraft version of this post.",
            "content_html": "<p>While going source spelunking, I came across this piece of code in Rails’ActiveModel:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"nf\">to_s</span><span class=\"p\">.</span><span class=\"nf\">camelize</span><span class=\"si\">}</span><span class=\"s2\">Validator\"</span><span class=\"k\">begin</span>  <span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">.</span><span class=\"nf\">include?</span><span class=\"p\">(</span><span class=\"s2\">\"::\"</span><span class=\"p\">.</span><span class=\"nf\">freeze</span><span class=\"p\">)</span> <span class=\"p\">?</span> <span class=\"n\">key</span><span class=\"p\">.</span><span class=\"nf\">constantize</span> <span class=\"p\">:</span> <span class=\"nb\">const_get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"k\">rescue</span> <span class=\"no\">NameError</span>  <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">,</span> <span class=\"s2\">\"Unknown validator: '</span><span class=\"si\">#{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">'\"</span><span class=\"k\">end</span></code></pre></div></div><p class=\"ma0\"><small><a href=\"https://github.com/rails/rails/blob/5-2-stable/activemodel/lib/active_model/validations/validates.rb#L116-L122\" target=\"_blank\"><code class=\"highlighter-rouge\">active_model/validations/validates.rb</code></a></small></p><p>This means that you can namespace your custom validators:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># lib/internal/email_validator.rb</span><span class=\"k\">module</span> <span class=\"nn\">Internal</span>  <span class=\"k\">class</span> <span class=\"nc\">EmailValidator</span>    <span class=\"k\">def</span> <span class=\"nf\">validate_each</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>      <span class=\"k\">return</span> <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">ends_with?</span><span class=\"p\">(</span><span class=\"s1\">'@private_domain.com'</span><span class=\"p\">)</span>      <span class=\"n\">record</span><span class=\"p\">.</span><span class=\"nf\">errors</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"s1\">'not from private domain'</span><span class=\"p\">)</span>    <span class=\"k\">end</span>  <span class=\"k\">end</span><span class=\"k\">end</span></code></pre></div></div><p>And then use them like this:</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># app/models/admin.rb</span><span class=\"k\">class</span> <span class=\"nc\">Admin</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>  <span class=\"n\">validates</span> <span class=\"ss\">:email</span><span class=\"p\">,</span> <span class=\"s1\">'internal/email'</span><span class=\"p\">:</span> <span class=\"kp\">true</span><span class=\"k\">end</span></code></pre></div></div><p><small>Thanks to <a href=\"https://twitter.com/caouibachir\" target=\"_blank\">Bachir Çaoui</a> for reviewing adraft version of this post.</small></p>",
            "url": "/posts/2018/08/namespaced-rails-validators/",
            
            
            
            "tags": ["ruby","rails"],
            
            "date_published": "2018-08-27T00:00:00+00:00",
            "date_modified": "2018-08-27T00:00:00+00:00",
            
                "author":  {
                "name": "Aliou Diallo",
                "url": "https://aliou.me"
                }
                
            
        },
    
        {
            "id": "/posts/2018/08/a-global-gitignore/",
            "title": "A global .gitignore",
            "summary": "How to have a global gitignore that applies to all repos",
            "content_text": "A small tip that I’ve come across recently: It is possible to have a global .gitignore filethat applies to every Git repository on your machine.Start by making a .gitignore file in your home directory,with the files you want to ignore, and place in your home directory:# ~/.gitignore.vimrc.local*.swp.idea.DS_StoreThen, tell Git to use this file as global .gitignore by running in your shell:git config --global core.excludesfile ~/.gitignoreYou can also take inspiration from my own global .gitignore file. Enjoy!",
            "content_html": "<p>A small tip that I’ve come across recently: It is possible to have a global <code class=\"highlighter-rouge\">.gitignore</code> filethat applies to every Git repository on your machine.</p><p>Start by making a <code class=\"highlighter-rouge\">.gitignore</code> file in your home directory,with the files you want to ignore, and place in your home directory:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># ~/.gitignore</span>.vimrc.local<span class=\"k\">*</span>.swp.idea.DS_Store</code></pre></div></div><p>Then, tell Git to use this file as global <code class=\"highlighter-rouge\">.gitignore</code> by running in your shell:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git config <span class=\"nt\">--global</span> core.excludesfile ~/.gitignore</code></pre></div></div><p>You can also take inspiration from my own<a href=\"https://github.com/aliou/dotfiles/blob/master/git/gitignore\" target=\"_blank\"> global .gitignore file</a>. Enjoy!</p>",
            "url": "/posts/2018/08/a-global-gitignore/",
            
            
            
            "tags": ["git","tools"],
            
            "date_published": "2018-08-26T00:00:00+00:00",
            "date_modified": "2018-08-26T00:00:00+00:00",
            
                "author":  {
                "name": "Aliou Diallo",
                "url": "https://aliou.me"
                }
                
            
        },
    
        {
            "id": "/posts/2018/08/hello-again/",
            "title": "Hello, again 🚀",
            "summary": null,
            "content_text": "I’m trying to get back into writing about stuff I learn after aprevious attempt. So here goes nothing!",
            "content_html": "<p>I’m trying to get back into writing about stuff I learn after aprevious attempt. So here goes nothing!</p>",
            "url": "/posts/2018/08/hello-again/",
            
            
            
            
            
            "date_published": "2018-08-25T00:00:00+00:00",
            "date_modified": "2018-08-25T00:00:00+00:00",
            
                "author":  {
                "name": "Aliou Diallo",
                "url": "https://aliou.me"
                }
                
            
        }
    
    ]
}
